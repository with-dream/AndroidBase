类加载：
生命周期：加载、验证、准备、解析、初始化、使用和卸载。
类加载包括加载、验证、准备、解析、初始化五个阶段

类加载机制主要3种：
全盘负责
所谓全盘负责,就是当一个类加载器负责加载某个Class时,该Class所依赖和引用其他Class也将由该类加载器负责载入,除非显示使用另外一个类加载器来载入

缓存机制
缓存机制将会保证所有加载过的Class都会被缓存,当程序中需要使用某个Class时,类加载器先从缓存区中搜寻该Class,只有当缓存区中不存在该Class对象时,
系统才会读取该类对应的二进制数据,并将其转换成Class对象,存入缓冲区中.这就是为什么修改了Class后,必须重新启动JVM,程序所做的修改才会生效的原因

双亲委任机制
双亲委派就是如果一个类加载器收到了类加载的请求,它首先不会自己去尝试加载这个类,而是把请求委托给父加载器去完成, 若成功则直接返回, 否则继续向上,直到到达最顶层的类加载器;
因此,所有的类加载请求最终都应该被传递到顶层的启动类加载器中,只有当父加载器无法完成该加载请求时,子加载器才会尝试自己去加载该类


# Android ClassLoader
https://www.jianshu.com/p/a620e368389a
https://www.jianshu.com/p/54378566aa86

BootClassLoader
和java虚拟机中不同的是BootClassLoader是ClassLoader内部类,由java代码实现而不是c++实现,是Android平台上所有
ClassLoader的最终parent,这个内部类是包内可见,所以我们没法使用。

URLClassLoader
只能用于加载jar文件，但是由于 dalvik 不能直接识别jar，所以在 Android 中无法使用这个加载器。

BaseDexClassLoader
PathClassLoader和DexClassLoader都继承自BaseDexClassLoader,其中的主要逻辑都是在BaseDexClassLoader完成的。这些源码在java/dalvik/system中。
DexClassLoader可以加载jar、dex、apk

【BaseDexClassLoader 遗珠一枚】

DexClassLoader支持加载APK、DEX和JAR，也可以从SD卡进行加载。
dalvik不能直接识别jar,DexClassLoader却可以加载jar文件,这难道不矛盾吗?其实在BaseDexClassLoader里对".jar",".zip",".apk",".dex"
后缀的文件最后都会生成一个对应的dex文件,所以最终处理的还是dex文件,而URLClassLoader并没有做类似的处理。
一般我们都是用这个DexClassLoader来作为动态加载的加载器。
optimizedDirectory为null时的默认路径就是/data/dalvik-cache 目录
PathClassLoader是用来加载Android系统类和应用的类，并且不建议开发者使用。

ClassLoader加载class的过程
#BaseDexClassLoader
@Override
protected Class<?> findClass(String name) throws ClassNotFoundException {
    Class clazz = pathList.findClass(name);
    if (clazz == null) {
        throw new ClassNotFoundException(name);
    }
    return clazz;
}
#DexPathList
public Class findClass(String name) {
    for (Element element : dexElements) {
        DexFile dex = element.dexFile;
        if (dex != null) {
            Class clazz = dex.loadClassBinaryName(name, definingContext);
          if (clazz != null) {
              return clazz;
          }
        }
    }
    return null;
}
#DexFile
public Class loadClassBinaryName(String name, ClassLoader loader) {
    return defineClass(name, loader, mCookie);
}
private native static Class defineClass(String name, ClassLoader loader, int cookie);

class加载过程解析：
BaseDexClassLoader中有个pathList对象，pathList中包含一个DexFile的数组dexElements，由上面分析知道，
dexPath传入的原始dex(.apk,.zip,.jar等)文件在optimizedDirectory文件夹中生成相应的优化后的odex文件，
dexElements数组就是这些odex文件的集合，如果不分包一般这个数组只有一个Element元素，也就只有一个DexFile文件，
而对于类加载呢，就是遍历这个集合，通过DexFile去寻找。最终调用native方法的defineClass。



####################################################################################################
Java 类加载[https://www.jianshu.com/p/1e4011617650]

双亲委任机制：
    当某个类加载器需要加载某个.class文件时，它首先把这个任务委托给他的上级类加载器，递归这个操作，
    如果上级的类加载器没有加载，自己才会去加载这个类。
双亲委派任制的作用
    1、防止重复加载同一个.class。通过委托去向上面问一问，加载过了，就不用再加载一遍。保证数据安全。
    2、保证核心.class不能被篡改。通过委托方式，不会去篡改核心.class，即使篡改也不会去加载，即使加载也不会是同一个.class对象了。
       不同的加载器加载同一个.class也不是同一个Class对象。这样保证了Class执行安全。

类加载器的类别
BootstrapClassLoader（启动类加载器）
    c++编写，加载java核心库 java.*,构造ExtClassLoader和AppClassLoader。由于引导类加载器涉及到虚拟机本地实现细节，
    开发者无法直接获取到启动类加载器的引用，所以不允许直接通过引用进行操作。
ExtClassLoader（标准扩展类加载器）
    java编写，加载扩展库，如classpath中的jre ，javax.*或者java.ext.dir 指定位置中的类，开发者可以直接使用标准扩展类加载器。
AppClassLoader（系统类加载器）
    java编写，加载程序所在的目录，如user.dir所在的位置的class
CustomClassLoader（用户自定义类加载器）
    java编写,用户自定义的类加载器,可加载指定路径的class文件
